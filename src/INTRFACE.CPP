/*
Game interface functions
for Starcan

(c)Alex Dainiak
*/
void drawstar( int x, int y, int type = 1 )
{
  if( type )
  {
    setcolor(1);
    circle( x, y, 2 );
    putpixel( x - 1, y - 1, 1 );
    putpixel( x + 1, y + 1, 1 );
    putpixel( x - 1, y + 1, 1 );
    putpixel( x + 1, y - 1, 1 );
  }

  putpixel( x, y, 11 );
  putpixel( x - 1, y, 9 );
  putpixel( x + 1, y, 9 );
  putpixel( x, y - 1, 9 );
  putpixel( x, y + 1, 9 );
}
void arcansymb( int x, int y, char symb )
{
char scorematr[15][15]={
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,
1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,
1,0,1,1,0,1,0,0,0,1,0,1,1,0,1,
0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,
0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,
0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,
0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,
0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,
0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,
0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,
0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,
0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
};
char ballmatr[15][15]={
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,
0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,
0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,
1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,
0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,
0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,
0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,
0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
};
char glmatr[15][9]={
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
0,1,0,1,0,1,1,0,1
};
  int k, n;

  switch( symb )
  {
     case 'S': for( k = 0; k < 15; k++ )
                for( n = 0; n < 15; n++ )
                  if( scorematr[k][n] )
                    drawstar( x + n, y + k, 0 );
               break;
     case 'B': for( k = 0; k < 15; k++ )
                for( n = 0; n < 15; n++ )
                  if( ballmatr[k][n] )
                    drawstar( x + n, y + k, 0 );
               break;
     case 'L': for( k = 0; k < 15; k++ )
                for( n = 0; n < 9; n++ )
                  if( glmatr[k][n] )
                    drawstar( x + n, y + k, 0 );
               break;

     case ':': drawstar( x, y + 3 );
               drawstar( x, y + 11 );
  }
}

void arcannum( int x, int y, int number, int dist )
{
char str[25];
itoa( number, str, 10 );

char dig1[15][5]={
0,0,0,1,1,
0,0,1,0,1,
0,0,1,0,1,
0,1,0,0,1,
0,1,0,0,1,
1,0,0,0,1,
0,0,0,0,1,
0,0,0,0,1,
0,0,0,0,1,
0,0,0,0,1,
0,0,0,0,1,
0,0,0,0,1,
0,0,0,0,1,
0,0,0,0,1,
0,0,0,0,1
};
char dig2[15][8]={
0,0,1,1,1,1,1,0,
0,1,0,0,0,0,0,1,
1,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,1,0,
0,0,0,0,0,0,1,0,
0,0,0,0,0,1,0,0,
0,0,0,0,1,0,0,0,
0,0,0,1,0,0,0,0,
0,0,1,0,0,0,0,0,
0,1,0,0,0,0,0,0,
0,1,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1
};
char dig3[15][8]={
0,0,1,1,1,1,1,0,
0,1,0,0,0,0,0,1,
1,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,1,0,
0,0,0,0,1,1,0,0,
0,0,0,0,1,1,0,0,
0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
1,0,0,0,0,0,1,0,
0,1,1,1,1,1,0,0
};
char dig4[15][7]={
1,0,0,0,0,0,0,
1,0,0,0,0,0,1,
1,0,0,0,0,0,1,
1,0,0,0,0,0,1,
1,0,0,0,0,0,1,
1,0,0,0,0,0,1,
0,1,1,1,1,1,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1
};
char dig5[15][8]={
0,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
0,1,1,1,1,1,1,0,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,1,
0,1,1,1,1,1,1,0
};
char dig6[15][9]={
0,0,1,1,1,1,1,1,0,
0,1,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,
1,0,1,1,1,1,1,0,0,
1,1,0,0,0,0,0,1,0,
1,0,0,0,0,0,0,1,0,
1,0,0,0,0,0,0,1,0,
1,0,0,0,0,0,0,1,0,
0,1,0,0,0,0,0,1,0,
0,0,1,1,1,1,1,0,0
};
char dig7[15][9]={
0,1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,1,0,0,
0,0,0,0,0,0,1,0,0,
0,0,0,0,0,1,0,0,0,
0,0,0,0,0,1,0,0,0,
0,0,0,0,0,1,0,0,0,
0,0,0,0,1,0,0,0,0,
0,0,0,0,1,0,0,0,0,
0,0,0,0,1,0,0,0,0,
0,0,0,1,0,0,0,0,0,
0,0,0,1,0,0,0,0,0
};
char dig8[15][9]={
0,0,0,1,1,1,0,0,0,
0,0,1,0,0,0,1,0,0,
0,0,1,0,0,0,1,0,0,
0,1,0,0,0,0,0,1,0,
0,1,0,0,0,0,0,1,0,
0,0,1,0,0,0,1,0,0,
0,0,0,1,1,1,0,0,0,
0,0,1,0,0,0,1,0,0,
0,1,0,0,0,0,0,1,0,
0,1,0,0,0,0,0,1,0,
1,0,0,0,0,0,0,0,1,
0,1,0,0,0,0,0,1,0,
0,1,0,0,0,0,0,1,0,
0,0,1,0,0,0,1,0,0,
0,0,0,1,1,1,0,0,0
};
char dig9[15][7]={
0,0,1,1,1,0,0,
0,1,0,0,0,1,0,
1,0,0,0,0,0,1,
1,0,0,0,0,0,1,
1,0,0,0,0,0,1,
1,0,0,0,0,0,1,
0,1,1,1,1,1,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1,
0,0,0,0,0,0,1,
0,0,0,0,0,1,0,
1,0,0,0,0,1,0,
0,1,1,1,1,0,0
};
char dig0[15][9]={
0,0,1,1,1,1,1,0,0,
0,1,0,0,0,0,0,1,0,
0,1,0,0,0,0,0,1,0,
1,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,1,
1,0,0,0,0,0,0,0,1,
0,1,0,0,0,0,0,1,0,
0,1,0,0,0,0,0,1,0,
0,0,1,1,1,1,1,0,0
};

int i = 0;
int offset = x;
int k, n;
while( str[i] )
{
  switch( str[i] )
  {
    case '0': for( k = 0; k < 15; k++ )
                for( n = 0; n < 9; n++ )
                  if( dig0[k][n] )
                    drawstar( offset + n, y + k );
              offset += 9 + dist;
              break;
    case '1': for( k = 0; k < 15; k++ )
                for( n = 0; n < 5; n++ )
                  if( dig1[k][n] )
                    drawstar( offset + n, y + k );
              offset += 5 + dist;
              break;
    case '2': for( k = 0; k < 15; k++ )
                for( n = 0; n < 8; n++ )
                  if( dig2[k][n] )
                    drawstar( offset + n, y + k );
              offset += 8 + dist;
              break;
    case '3': for( k = 0; k < 15; k++ )
                for( n = 0; n < 8; n++ )
                  if( dig3[k][n] )
                    drawstar( offset + n, y + k );
              offset += 8 + dist;
              break;
    case '4': for( k = 0; k < 15; k++ )
                for( n = 0; n < 7; n++ )
                  if( dig4[k][n] )
                    drawstar( offset + n, y + k );
              offset += 7 + dist;
              break;
    case '5': for( k = 0; k < 15; k++ )
                for( n = 0; n < 8; n++ )
                  if( dig5[k][n] )
                    drawstar( offset + n, y + k );
              offset += 8 + dist;
              break;
    case '6': for( k = 0; k < 15; k++ )
                for( n = 0; n < 9; n++ )
                  if( dig6[k][n] )
                    drawstar( offset + n, y + k );
              offset += 9 + dist;
              break;
    case '7': for( k = 0; k < 15; k++ )
                for( n = 0; n < 9; n++ )
                  if( dig7[k][n] )
                    drawstar( offset + n, y + k );
              offset += 9 + dist;
              break;
    case '8': for( k = 0; k < 15; k++ )
                for( n = 0; n < 9; n++ )
                  if( dig8[k][n] )
                    drawstar( offset + n, y + k );
              offset += 9 + dist;
              break;
    case '9': for( k = 0; k < 15; k++ )
                for( n = 0; n < 7; n++ )
                  if( dig9[k][n] )
                    drawstar( offset + n, y + k );
              offset += 7 + dist;
  }

  i++;
  }
}

void window( int x1, int y1, int x2, int y2 )
{
 setcolor( 11 );
 rectangle( x1, y1, x2, y2 );
 setcolor( 3 );
 rectangle( x1 + 1, y1 + 1, x2 - 1, y2 - 1 );
 setcolor( 9 );
 rectangle( x1 + 2, y1 + 2, x2 - 2, y2 - 2 );
 setcolor( 1 );
 rectangle( x1 + 3, y1 + 3, x2 - 3, y2 - 3 );
}
void divider( int x, int y, int dir, int size )
{
  if( dir )
  {
    setcolor( 11 );
    line( x, y, x, y + size );
    setcolor( 9 );
    line( x - 1, y, x - 1, y + size );
    line( x + 1, y, x + 1, y + size );
    setcolor( 1 );
    line( x - 2, y, x - 2, y + size );
    line( x + 2, y, x + 2, y + size );
  }
  else
  {
    setcolor( 11 );
    line( x, y, x + size, y );
    setcolor( 9 );
    line( x, y + 1, x + size, y + 1 );
    line( x, y - 1, x + size, y - 1 );
    setcolor( 1 );
    line( x, y + 2, x + size, y + 2 );
    line( x, y - 2, x + size, y - 2 );
  }
}